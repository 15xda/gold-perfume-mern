import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { toast } from 'react-toastify';
import zxcvbn from 'zxcvbn';
import { motion } from 'framer-motion';

const fadeIn = {
  initial: { opacity: 0 },
  animate: { opacity: 1, transition: { duration: 0.5 } },
}

const Register = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });

  const [passwordStrength, setPasswordStrength] = useState(null);
  const [passwordMatchError, setPasswordMatchError] = useState('');
  const [psStrengthStyle, setPsStrengthStyle] = useState({ display: 'none' });
  const [passwordScore, setPasswordScore] = useState(0);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));

    if (name === 'password') {
      setPasswordScore(zxcvbn(value).score);
      setPsStrengthStyle({ margin: '15px 0', fontSize: '14px', display: 'block' });

      switch (passwordScore) {
        case 0: setPasswordStrength('‚ùå –û—á–µ–Ω—å —Å–ª–∞–±—ã–π'); break;
        case 1: setPasswordStrength('‚ö†Ô∏è –°–ª–∞–±—ã–π'); break;
        case 2: setPasswordStrength('üü° –°—Ä–µ–¥–Ω–∏–π'); break;
        case 3: setPasswordStrength('‚úÖ –•–æ—Ä–æ—à–∏–π'); break;
        case 4: setPasswordStrength('üí™ –ù–∞–¥—ë–∂–Ω—ã–π'); break;
        default: setPasswordStrength('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'); break;
      }
    }

    if (name === 'confirmPassword' || name === 'password') {
      if (
        name === 'confirmPassword' && value !== formData.password ||
        name === 'password' && formData.confirmPassword && formData.confirmPassword !== value
      ) {
        setPasswordMatchError('‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      }
       else {
        setPasswordMatchError('');
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (formData.password !== formData.confirmPassword) {
      toast.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      return;
    }

    setIsLoading(true);
    try {
      const response = await axios.post('http://localhost:4004/register', formData);
      toast.success(response.data.message);
      navigate('/login');
    } catch (error) {
      toast.error(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.response?.data?.message);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <motion.section variants={fadeIn} initial="initial" whileInView="animate" viewport={{ once: true }} className="auth-page">
      <div className="auth-container">
      <div className='auth-logo'><img src="src/images/logo-dark-font.png" alt="" /></div>
        <h1>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</h1>
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <input
              type="text"
              name="name"
              placeholder="–ü–æ–ª–Ω–æ–µ –∏–º—è"
              value={formData.name}
              onChange={handleChange}
              required
            />
          </div>
          <div className="form-group">
            <input
              type="email"
              name="email"
              placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
              value={formData.email}
              onChange={handleChange}
              required
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              name="password"
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={formData.password}
              onChange={handleChange}
              required
            />
          </div>
          <div className="form-group">
            <input
              type="password"
              name="confirmPassword"
              placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              value={formData.confirmPassword}
              onChange={handleChange}
              required
            />
          </div>

          {passwordMatchError && <p style={{ color: 'red', fontSize: '14px' }}>{passwordMatchError}</p>}
          <p style={psStrengthStyle}>–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è: {passwordStrength}</p>

          <button type="submit" className="auth-submit" disabled={isLoading || passwordScore < 2}>
            {isLoading ? <div className='loader-small'></div> : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </form>
        <div className="auth-links">
          <p>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? <Link to="/login">–í–æ–π—Ç–∏</Link></p>
        </div>
      </div>
    </motion.section>
  );
};

export default Register;
